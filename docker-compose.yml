version: '3.8'
services:
  kafka:
    image: confluentinc/cp-kafka:7.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.123:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ./kafka_data:/var/lib/kafka/data

  llama-server:
    build:
      context: .
      dockerfile: Dockerfile.llama
    ports:
      - "8080:8080"
    volumes:
      - ./models:/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["./server", "-m", "/models/llama3.2.gguf", "--host", "0.0.0.0", "--port", "8080", "--ctx-size", "2048", "--n-gpu-layers", "999"]

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./qdrant_data:/qdrant/storage

  llama-app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - llama-server
      - qdrant
    volumes:
      - ./documents:/app/documents
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      LLAMA_SERVER_HOST: llama-server:8080
      QDRANT_HOST: qdrant:6333

volumes:
  kafka-data:
  qdrant-data:
